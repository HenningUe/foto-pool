name: Release - Build and Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  version-validation:
    name: Validate and Prepare Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          # Extract version from release tag
          TAG_NAME="${{ github.event.release.tag_name }}"
          VERSION="${TAG_NAME#v}"  # Remove 'v' prefix if present
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Use manually provided version
          TAG_NAME="${{ github.event.inputs.version }}"
          VERSION="${TAG_NAME#v}"  # Remove 'v' prefix if present
        else
          echo "❌ Invalid trigger for release workflow"
          exit 1
        fi
        
        echo "Tag: $TAG_NAME"
        echo "Version: $VERSION"
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Validate version format
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src/iphoto_downloader/src')
        from iphoto_downloader.version import parse_version
        try:
            parse_version('${{ steps.version.outputs.version }}')
            print('✅ Version format is valid: ${{ steps.version.outputs.version }}')
        except ValueError as e:
            print(f'❌ Invalid version format: {e}')
            sys.exit(1)
        "
    
    - name: Update VERSION file
      run: |
        echo "${{ steps.version.outputs.version }}" > VERSION
        echo "✅ VERSION file updated to: ${{ steps.version.outputs.version }}"

  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: version-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Update VERSION file for Windows build
      run: |
        echo "${{ needs.version-validation.outputs.version }}" > VERSION
        echo "Building Windows version: ${{ needs.version-validation.outputs.version }}"

    - name: Create .env file for testing
      run: |
        copy .env.example .env
        echo "✓ Created .env file from .env.example for testing"

    - name: Run tests before building
      run: |
        uv run pytest -m "not manual" --tb=short

    - name: Build Windows executables
      run: |
        powershell -ExecutionPolicy Bypass -File build_windows.ps1

    - name: Test built executables
      run: |
        $env:PYTHONIOENCODING = "utf-8"
        uv run python tests/manuel/test_build.py "dist\iphoto_downloader.exe" --summary-only

    - name: Create Windows artifacts directory
      run: |
        mkdir windows-artifacts
        copy dist\iphoto_downloader.exe windows-artifacts\
        copy dist\iphoto_downloader_credentials.exe windows-artifacts\

    - name: Upload Windows build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-executables
        path: windows-artifacts/

  build-linux:
    name: Build Linux Executable
    runs-on: ubuntu-latest
    needs: version-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libffi-dev

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Update VERSION file for Linux build
      run: |
        echo "${{ needs.version-validation.outputs.version }}" > VERSION
        echo "Building Linux version: ${{ needs.version-validation.outputs.version }}"

    - name: Create .env file for testing
      run: |
        cp .env.example .env
        echo "✓ Created .env file from .env.example for testing"

    - name: Run tests before building
      run: |
        uv run pytest -m "not manual" --tb=short

    - name: Build Linux executables
      run: |
        chmod +x build_linux.sh
        ./build_linux.sh

    - name: Test built executables
      run: |
        uv run python tests/manuel/test_build.py dist/iphoto_downloader --summary-only

    - name: Create Linux artifacts directory
      run: |
        mkdir linux-artifacts
        cp dist/iphoto_downloader linux-artifacts/
        cp dist/iphoto_downloader_credentials linux-artifacts/

    - name: Upload Linux build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-executables
        path: linux-artifacts/

  package-snap:
    name: Package for Snap Store
    runs-on: ubuntu-latest
    needs: build-linux
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux executables
      uses: actions/download-artifact@v4
      with:
        name: linux-executables
        path: linux-executables/

    - name: Install snapcraft
      run: |
        sudo apt update
        sudo apt install -y snapd
        sudo snap install core
        sudo snap install snapcraft --classic
        # Wait for snapd to be ready
        sudo systemctl enable --now snapd.socket
        sleep 10

    - name: Create Snap package structure
      run: |
        mkdir -p snap-package/bin
        mkdir -p snap-package/share/applications
        mkdir -p snap-package/share/doc/iphoto-downloader

    - name: Copy executables to package
      run: |
        cp linux-executables/iphoto_downloader snap-package/bin/
        cp linux-executables/iphoto_downloader_credentials snap-package/bin/iphoto-downloader-credentials
        chmod +x snap-package/bin/*

    - name: Create snapcraft.yaml
      run: |
        VERSION="${{ github.event.release.tag_name || github.event.inputs.version }}"
        VERSION=${VERSION#v}  # Remove 'v' prefix if present
        
        cat > snapcraft.yaml << EOF
        name: iphoto-downloader
        version: '${VERSION}'
        summary: iCloud Photo Synchronization Tool
        description: |
          A tool for synchronizing photos from iCloud to local storage with
          intelligent deletion tracking and album filtering capabilities.
          
          Features include:
          - Bidirectional sync with iCloud Photos
          - Smart deletion tracking to prevent re-downloads
          - Album-based filtering and organization
          - 2FA authentication support with Pushover notifications
          - Cross-platform compatibility

        grade: stable
        confinement: strict
        base: core20
        architectures:
          - build-on: amd64

        apps:
          iphoto-downloader:
            command: bin/iphoto_downloader
            plugs:
              - home
              - network
              - removable-media
          iphoto-downloader-credentials:
            command: bin/iphoto-downloader-credentials
            plugs:
              - home
              - network

        parts:
          iphoto-downloader:
            plugin: dump
            source: snap-package/
            organize:
              bin/*: bin/
              share/*: share/
        EOF

    - name: Create desktop entry
      run: |
        cat > snap-package/share/applications/iphoto-downloader.desktop << EOF
        [Desktop Entry]
        Name=iPhoto Downloader
        Comment=iCloud Photo Synchronization Tool
        Exec=iphoto-downloader.iphoto-downloader
        Icon=\${SNAP}/share/pixmaps/iphoto-downloader.png
        Terminal=true
        Type=Application
        Categories=Graphics;Photography;
        EOF

    - name: Copy documentation
      run: |
        cp USER-GUIDE.md snap-package/share/doc/iphoto-downloader/
        cp LICENSE snap-package/share/doc/iphoto-downloader/copyright

    - name: Prepare snap build environment
      run: |
        # Ensure core20 base is available
        sudo snap install core20
        sudo snap refresh
        # Display available snaps for debugging
        snap list

    - name: Build Snap package
      run: |
        # Use destructive mode to build directly on host (no LXD containers needed)
        # Add retry logic and better error handling
        for i in {1..3}; do
          echo "Attempt $i to build snap package..."
          if snapcraft pack --destructive-mode; then
            echo "Snap package built successfully!"
            break
          else
            echo "Build attempt $i failed, retrying..."
            if [ $i -eq 3 ]; then
              echo "All build attempts failed"
              exit 1
            fi
            sleep 30
          fi
        done

    - name: Upload Snap package artifact
      uses: actions/upload-artifact@v4
      with:
        name: snap-package
        path: iphoto-downloader_*.snap

  package-winget:
    name: Package for WinGet
    runs-on: windows-latest
    needs: build-windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows executables
      uses: actions/download-artifact@v4
      with:
        name: windows-executables
        path: windows-executables/

    - name: Install WinGet Create
      run: |
        Invoke-WebRequest -Uri "https://github.com/microsoft/winget-create/releases/latest/download/wingetcreate.exe" -OutFile "wingetcreate.exe"

    - name: Create WinGet package manifest
      run: |
        $version = "${{ github.event.release.tag_name || github.event.inputs.version }}"
        $version = $version -replace '^v', ''  # Remove 'v' prefix if present
        
        # Create installer for main executable
        $mainSize = (Get-Item windows-executables/iphoto_downloader.exe).Length
        $credSize = (Get-Item windows-executables/iphoto_downloader_credentials.exe).Length
        
        # Create manifest directory
        New-Item -ItemType Directory -Force -Path "winget-manifests"
        
        # Create version manifest
        $versionManifest = @"
        PackageIdentifier: HenningUe.iPhotoDownloader
        PackageVersion: $version
        DefaultLocale: en-US
        ManifestType: version
        ManifestVersion: 1.2.0
        "@
        
        # Create installer manifest
        $installerManifest = @"
        PackageIdentifier: HenningUe.iPhotoDownloader
        PackageVersion: $version
        Installers:
        - Architecture: x64
          InstallerType: exe
          InstallerUrl: https://github.com/HenningUe/iphoto-downloader/releases/download/${{ github.event.release.tag_name || github.event.inputs.version }}/iphoto_downloader.exe
          InstallerSha256: # Will be calculated by WinGet team
          InstallerSwitches:
            Silent: ""
            SilentWithProgress: ""
        ManifestType: installer
        ManifestVersion: 1.2.0
        "@
        
        # Create locale manifest
        $localeManifest = @"
        PackageIdentifier: HenningUe.iPhotoDownloader
        PackageVersion: $version
        PackageLocale: en-US
        Publisher: HenningUe
        PublisherUrl: https://github.com/HenningUe
        PublisherSupportUrl: https://github.com/HenningUe/iphoto-downloader/issues
        Author: HenningUe
        PackageName: iPhoto Downloader
        PackageUrl: https://github.com/HenningUe/iphoto-downloader
        License: MIT
        LicenseUrl: https://github.com/HenningUe/iphoto-downloader/blob/main/LICENSE
        Copyright: Copyright (c) HenningUe
        ShortDescription: iPhoto Downloader Tool with intelligent deletion tracking
        Description: A comprehensive tool for synchronizing photos from iCloud to local storage with smart deletion tracking, album filtering, and 2FA support.
        Moniker: iphoto-downloader
        Tags:
        - icloud
        - photos
        - sync
        - backup
        - photo-management
        ManifestType: defaultLocale
        ManifestVersion: 1.2.0
        "@
        
        # Save manifests
        $versionManifest | Out-File -FilePath "winget-manifests/HenningUe.iPhotoDownloader.yaml" -Encoding UTF8
        $installerManifest | Out-File -FilePath "winget-manifests/HenningUe.iPhotoDownloader.installer.yaml" -Encoding UTF8
        $localeManifest | Out-File -FilePath "winget-manifests/HenningUe.iPhotoDownloader.locale.en-US.yaml" -Encoding UTF8

    - name: Upload WinGet manifests
      uses: actions/upload-artifact@v4
      with:
        name: winget-manifests
        path: winget-manifests/

  publish-to-winget:
    name: Publish to WinGet
    runs-on: windows-latest
    needs: [package-winget, publish-release]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download WinGet manifests
      uses: actions/download-artifact@v4
      with:
        name: winget-manifests
        path: winget-manifests/

    - name: Submit to WinGet Community Repository
      run: |
        # This step would typically involve:
        # 1. Forking the Microsoft/winget-pkgs repository
        # 2. Creating a PR with the new manifests
        # 3. Submitting for review
        
        Write-Host "WinGet manifests prepared for submission"
        Write-Host "Manual step required: Submit PR to microsoft/winget-pkgs repository"
        
        # For now, we'll just display the manifest contents
        Get-ChildItem winget-manifests/ -Filter "*.yaml" | ForEach-Object {
            Write-Host "=== $($_.Name) ==="
            Get-Content $_.FullName
        }

  publish-to-snap:
    name: Publish to Snap Store
    runs-on: ubuntu-latest
    needs: [package-snap, publish-release]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Snap package
      uses: actions/download-artifact@v4
      with:
        name: snap-package
        path: snap-package/

    - name: Install snapcraft
      run: |
        sudo snap install snapcraft --classic

    - name: Prepare Snap Store submission
      run: |
        echo "Snap package prepared for submission"
        echo "Package details:"
        snap info snap-package/*.snap || echo "Package info not available (expected for unsigned snap)"
        
        echo "Manual step required:"
        echo "1. Register app name: snapcraft register iphoto-downloader"
        echo "2. Upload snap: snapcraft upload snap-package/*.snap"
        echo "3. Release to appropriate channel (stable/candidate/beta/edge)"
        echo "4. Package available at: snap-package/"
        
        ls -la snap-package/

    - name: Store submission info
      run: |
        echo "To complete Snap Store submission:"
        echo "1. Authenticate: snapcraft login"
        echo "2. Register name: snapcraft register iphoto-downloader"
        echo "3. Upload package: snapcraft upload iphoto-downloader_*.snap"
        echo "4. Release: snapcraft release iphoto-downloader <revision> stable"
        echo ""
        echo "Snap package is ready for manual submission to Snap Store"

  publish-release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows executables
      uses: actions/download-artifact@v4
      with:
        name: windows-executables
        path: windows-executables/

    - name: Download Linux executables
      uses: actions/download-artifact@v4
      with:
        name: linux-executables
        path: linux-executables/

    - name: Create release assets
      run: |
        mkdir release-assets
        
        # Package Windows executables
        cd windows-executables
        zip ../release-assets/iphoto-downloader-windows-x64.zip *
        cd ..
        
        # Package Linux executables
        cd linux-executables
        tar -czf ../release-assets/iphoto-downloader-linux-x64.tar.gz *
        cd ..
        
        # Copy individual executables with versioned names
        cp windows-executables/iphoto_downloader.exe release-assets/
        cp windows-executables/iphoto_downloader_credentials.exe release-assets/
        cp linux-executables/iphoto_downloader release-assets/
        cp linux-executables/iphoto_downloader_credentials release-assets/iphoto-downloader-credentials

    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release-assets/*
        body: |
          ## 🚀 Release ${{ github.event.release.tag_name }}
          
          ### Downloads
          
          **Windows:**
          - 📦 [Complete Windows Package](./iphoto-downloader-windows-x64.zip) - Both executables in one ZIP
          - 🖼️ [Main Application (iphoto_downloader.exe)](./iphoto_downloader.exe)
          - 🔐 [Credentials Manager (iphoto_downloader_credentials.exe)](./iphoto_downloader_credentials.exe)
          
          **Linux:**
          - 📦 [Complete Linux Package](./iphoto-downloader-linux-x64.tar.gz) - Both executables in one archive
          - 🖼️ [Main Application (iphoto_downloader)](./iphoto_downloader)
          - 🔐 [Credentials Manager (iphoto-downloader-credentials)](./iphoto-downloader-credentials)
          
          ### Installation
          
          **Windows (via WinGet):**
          ```powershell
          winget install HenningUe.iPhotoDownloader
          ```
          
          **Linux (via APT):**
          ```bash
          # APT repository submission in progress
          # Manual installation for now:
          wget https://github.com/HenningUe/iphoto-downloader/releases/download/${{ github.event.release.tag_name }}/iphoto-downloader-linux-x64.tar.gz
          tar -xzf iphoto-downloader-linux-x64.tar.gz
          sudo mv iphoto_downloader /usr/local/bin/
          sudo mv iphoto_downloader_credentials /usr/local/bin/iphoto-downloader-credentials
          ```
          
          ### What's New
          - Full CI/CD pipeline with automatic builds
          - Cross-platform executable distribution
          - Preparation for WinGet and APT package managers
          
          ### Getting Started
          1. Download the appropriate executable for your platform
          2. Run the credentials manager first to set up your iCloud credentials
          3. Configure your sync settings
          4. Start syncing your photos!
          
          For detailed instructions, see the [README](https://github.com/HenningUe/iphoto-downloader/blob/main/USER-GUIDE.md).
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
