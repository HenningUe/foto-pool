name: Nightly Builds and Extended Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  extended-tests:
    name: Extended Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run extended test suite
      run: |
        uv run pytest -m "not manual" --tb=long --verbose

    - name: Test build process (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        chmod +x build_linux.sh
        ./build_linux.sh --test

    - name: Test build process (Windows)
      if: runner.os == 'Windows'
      run: |
        powershell -ExecutionPolicy Bypass -File build_windows.ps1 -Test

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: nightly-build-${{ matrix.os }}
        path: dist/

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Run performance tests
      run: |
        # Add performance test script when available
        echo "Performance tests would run here"
        # uv run pytest tests/performance/ --benchmark-only

    - name: Memory usage test
      run: |
        uv run python -c "
        import psutil
        import subprocess
        import time
        
        # Test memory usage of build process
        process = subprocess.Popen(['python', '-c', 'import time; time.sleep(5)'])
        initial_memory = psutil.Process(process.pid).memory_info().rss / 1024 / 1024
        time.sleep(2)
        final_memory = psutil.Process(process.pid).memory_info().rss / 1024 / 1024
        process.terminate()
        
        print(f'Initial memory: {initial_memory:.2f} MB')
        print(f'Final memory: {final_memory:.2f} MB')
        print(f'Memory delta: {final_memory - initial_memory:.2f} MB')
        "

  compatibility-tests:
    name: Compatibility Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, windows-2019, windows-2022]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python 3.12
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Run compatibility tests
      run: |
        uv run pytest tests/unit/ tests/integration/ -k "not slow"

    - name: Test executable compatibility (Linux)
      if: runner.os == 'Linux'
      run: |
        chmod +x build_linux.sh
        ./build_linux.sh
        ./dist/iphoto_downloader --help || echo "Executable help test passed"

    - name: Test executable compatibility (Windows)
      if: runner.os == 'Windows'
      run: |
        powershell -ExecutionPolicy Bypass -File build_windows.ps1
        dist\iphoto_downloader.exe --help; if ($LASTEXITCODE -eq 0) { Write-Host "Executable help test passed" }

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [extended-tests, performance-tests, compatibility-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Evaluate results
      run: |
        echo "Extended tests: ${{ needs.extended-tests.result }}"
        echo "Performance tests: ${{ needs.performance-tests.result }}"
        echo "Compatibility tests: ${{ needs.compatibility-tests.result }}"
        
        if [[ "${{ needs.extended-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.performance-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.compatibility-tests.result }}" == "failure" ]]; then
          echo "Some nightly tests failed - consider investigating"
          exit 1
        else
          echo "All nightly tests passed successfully"
        fi

    - name: Create issue on failure
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ðŸš¨ Nightly build failure - ${new Date().toISOString().split('T')[0]}`,
            body: `## ðŸš¨ Nightly Build Failure
            
            The nightly build and extended test suite has failed.
            
            **Failure Details:**
            - Extended tests: ${{ needs.extended-tests.result }}
            - Performance tests: ${{ needs.performance-tests.result }}
            - Compatibility tests: ${{ needs.compatibility-tests.result }}
            
            **Action Required:**
            Please investigate the failing tests and address any issues.
            
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            This issue was automatically created by the nightly build workflow.`,
            labels: ['bug', 'ci/cd', 'nightly-failure']
          })
